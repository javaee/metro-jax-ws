<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-asynchronous-client" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Asynchronous Client</title>

    <para>This document describes how a client application can invoke a remote
    web service asynchronously. It can do so either by generating a static
    stub or using the Dispatch API.</para>

    <section xml:id="section-346120708971664">
        <title>Asynchronous Invocation Using Static Stub</title>

        <para>Client application should apply
        <literal>jaxws:enableAsyncMapping</literal> binding declaration to the
        WSDL file to generate asynchronous method in the service endpoint
        interface. Please refer to <xref linkend="asynchrony"
        xrefstyle="select:title" /> for details on how this can be applied to
        the WSDL file.</para>

        <para>Lets look at the following WSDL excerpt:</para>

        <informalexample>
            <programlisting language="xml"><![CDATA[<definitions
        name="AddNumbers"
        targetNamespace="http://duke.example.org"
        xmlns:tns="http://duke.example.org"
        xmlns="http://schemas.xmlsoap.org/wsdl/"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
    
    ...
    
    <portType name="AddNumbersImpl">
        <operation name="addNumbers">
            <input message="tns:addNumbers"/>
            <output message="tns:addNumbersResponse"/>
        </operation>
    </portType>
    <binding name="AddNumbersImplBinding" type="tns:AddNumbersImpl">
        <soap:binding transport="http://schemas.xmlsoap.org/soap/http"
                style="document"/>
        <operation name="addNumbers">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
        </operation>
    </binding>
    
    ...
    
</definitions>]]></programlisting>
        </informalexample>

        <para>In order to generate a service endpoint interface with
        asynchronous methods the following binding declaration file will be
        passed to <command>wsimport</command>:</para>

        <informalexample>
            <programlisting language="xml"><![CDATA[<bindings 
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
        wsdlLocaption="http://localhost:8080/jaxws-async/addnumbers?WSDL"
        xmlns="http://java.sun.com/xml/ns/jaxws">
    <bindings node="wsdl:definitions">
        <package name="async.client"/>
        <enableAsyncMapping>true</enableAsyncMapping>
    </bindings>
</bindings>]]></programlisting>
        </informalexample>

        <para>It produces the following service endpoint interface
        (annotations are removed from the synchronous method for better
        readability):</para>

        <informalexample>
            <programlisting><![CDATA[//synchronous method
public int addNumbers(int number1, int number2) throws java.rmi.RemoteException;

//async polling Method
public Response<AddNumbersResponse> addNumbers(int number1, int number2);

//async callback Method
public Future<?> addNumbers(int number1, int number2, AsyncHandler<AddNumbersResponse>);]]></programlisting>
        </informalexample>

        <section xml:id="section-449139041763976">
            <title>Async Polling</title>

            <informalexample>
                <programlisting><![CDATA[//async polling Method
public Response<AddNumbersResponse> addNumbers(int number1, int number2);]]></programlisting>
            </informalexample>

            <para>Typically a client application will invoke the async polling
            operation on the stub and check for a response on the returned
            <literal>Response</literal> object. The response is available when
            <literal>Response.isDone</literal> returns true.</para>

            <informalexample>
                <programlisting language="java"><![CDATA[javax.xml.ws.Response<AddNumbersResponse> resp = port
        .addNumbersAsync(10, 20);
while (!resp.isDone()) {
    //do something
}
System.out.println("The sum is: " + resp.get().getReturn());

...]]></programlisting>
            </informalexample>
        </section>

        <section xml:id="section-73214284296898">
            <title>Async Callback</title>

            <informalexample>
                <programlisting><![CDATA[//async callback Method
public Future<?> addNumbers(int number1, int number2, AsyncHandler<AddNumbersResponse>);]]></programlisting>
            </informalexample>

            <para>Here the client application provides an
            <literal>AsyncHandler</literal> by implementing the
            <literal>javax.xml.ws.AsyncHandler&lt;T&gt;</literal>
            interface.</para>

            <informalexample>
                <programlisting language="java"><![CDATA[/**
 * Async callback handler
 */
class AddNumbersCallbackHandler implements 
        AsyncHandler<AddNumbersResponse> {
    private AddNumbersResponse output;

    /**
     * @see javax.xml.ws.AsyncHandler#handleResponse(javax.xml.ws.Response)
     */
    public void handleResponse(Response<AddNumbersResponse> response) {
        try {
            output = response.get();
        } catch (ExecutionException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    AddNumbersResponse getResponse() {
        return output;
    }
}]]></programlisting>
            </informalexample>

            <para>The async handler is then passed as the last parameter of
            the async callback method:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[//instantiates the callback handler
AddNumbersCallbackHandler callbackHandler = new 
        AddNumbersCallbackHandler();

//invoke the async callback method
Future<?> resp = port.addNumbersAsync(number1, number2, callbackHandler);
while (!resp.isDone()) {
    //do something
}
System.out.println("The sum is: " + callbackHandler.getResponse().getReturn());]]></programlisting>
            </informalexample>
        </section>
    </section>

    <section xml:id="section-85273158180115">
        <title>Asynchronous Invocation Using Dispatch</title>

        <para>For information on the Dispatch API and asynchronous invocations
        see <xref linkend="users-guide-dispatch"
        xrefstyle="select:title" /></para>
    </section>
</section>
