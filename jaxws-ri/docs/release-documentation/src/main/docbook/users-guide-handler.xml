<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-handler" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Handler</title>

    <section xml:id="section-524340464580105">
        <title>Handler Types</title>

        <para>JAX-WS 2.0 defines a <literal>Handler</literal> interface, with
        subinterfaces <literal>LogicalHandler</literal> and
        <literal>SOAPHandler</literal>. The <literal>Handler</literal>
        interface contains <literal>handleMessage(C context)</literal> and
        <literal>handleFault(C context)</literal> methods, where
        <literal>C</literal> extends <literal>MessageContext</literal>. A
        property in the <literal>MessageContext</literal> object is used to
        determine if the message is inbound or outbound.
        <literal>SOAPHandler</literal> objects have access to the full soap
        message including headers. Logical handlers are independent of
        protocol and have access to the payload of the message.</para>

        <para>The new handler types can now be written without casting the
        message context object that is passed to them. For instance:</para>

        <informalexample>
            <programlisting language="java"><![CDATA[public class MyLogicalHandler implements 
        LogicalHandler<LogicalMessageContext> {

    public boolean handleMessage(LogicalMessageContext messageContext) {
        LogicalMessage msg = messageContext.getMessage();
        return true;
    }
    // other methods
}]]></programlisting>
        </informalexample>

        <informalexample>
            <programlisting language="java"><![CDATA[public class MySOAPHandler implements SOAPHandler<SOAPMessageContext> {

    public boolean handleMessage(SOAPMessageContext messageContext) {
        SOAPMessage msg = messageContext.getMessage();
        return true;
    }
    // other methods
}]]></programlisting>
        </informalexample>

        <para>A <literal>close(C context)</literal> method has been added that
        is called on the handlers at the conclusion of a message exchange
        pattern. This allows handlers to clean up any resources that were used
        for the processing of a request-only or request/response
        exchange.</para>

        <para>The <literal>init()</literal> and <literal>destroy()</literal>
        methods of the handler lifecycle no longer exist. Instead, a method
        may be annotated with the <literal>@PostConstruct</literal> annotation
        to be called after the handler is created or the
        <literal>@PreDestroy</literal> annotation to be called before the
        handler is destroyed. Note that the annotated methods must return
        <literal>void</literal> and take no arguments:</para>

        <informalexample>
            <programlisting language="java"><![CDATA[import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

public class MyLogicalHandler implements 
        LogicalHandler<LogicalMessageContext> {
    
    @PostConstruct
    public void methodA() {
    }

    @PreDestroy
    public void methodB() {
    }

    // other methods
}]]></programlisting>
        </informalexample>
    </section>

    <section xml:id="section-276528078695232">
        <title>MessageContext</title>

        <para>In the examples above, the <literal>LogicalMessage</literal>
        object allows a handler to get and set the message payload either as a
        JAXB object or as a <literal>javax.xml.transform.Source</literal>. The
        <literal>SOAPMessage</literal> object allows access to headers and the
        SOAP body of the message.</para>

        <para>Both context objects extend <literal>MessageContext</literal>,
        which holds properties that the handlers can use to communicate with
        each other. A standard property
        <literal>MessageContext.MESSAGE_OUTBOUND_PROPERTY</literal> holds a
        <literal>Boolean</literal> that is used to determine the direction of
        a message. For example, during a request, the property would be
        <literal>Boolean.TRUE</literal> when seen by a client handler and
        <literal>Boolean.FALSE</literal> when seen by a server handler.</para>

        <para>The message context object can also hold properties set by the
        client or provider. For instance, port proxy and dispatch objects both
        extend <literal>BindingProvider</literal>. A message context object
        can be obtained from both to represent the request or response
        context. Properties set in the request context can be read by the
        handlers, and the handlers may set properties on the message context
        objects passed to them. If these properties are set with the scope
        <literal>MessageContext.Scope.APPLICATION</literal> then they will be
        available in the response context to the client. On the server end, a
        context object is passed into the <literal>invoke</literal> method of
        a <literal>Provider</literal>.</para>
    </section>

    <section xml:id="section-165423693536683">
        <title>Handler Chain Configuration</title>

        <section xml:id="section-404105458093083">
            <title>Handler Files</title>

            <para>Starting from a WSDL file, handler chain configuration is
            through WSDL customizations as defined by <link
            xlink:href="http://jcp.org/en/jsr/detail?id=109">JSR 109</link>. A
            <literal>&lt;handler-chains&gt;</literal> element is added to the
            customization file. The following is a simple handler chain with
            one handler (customization may be on server or client
            side):</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<-- excerpt from customization file -->
<bindings xmlns="http://java.sun.com/xml/ns/jaxws">
    <handler-chains xmlns="http://java.sun.com/xml/ns/javaee">
        <handler-chain>
            <handler>
                <handler-class>fromwsdl.handler_simple.common.TestHandler
                </handler-class>
            </handler>
        </handler-chain>
    </handler-chains>
</bindings>]]></programlisting>
            </informalexample>

            <para>Multiple <literal>handler-chain</literal> elements may exist
            within the <literal>handler-chains</literal> element. These may
            optionally use a service name, port name, or protocol pattern in
            their description to apply some chains to certain ports and
            protocols and not to others. For instance (note the wildcard
            character used in the service name):</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<-- excerpt -->
<handler-chains xmlns="http://java.sun.com/xml/ns/javaee">
    <handler-chain>
        <service-name-pattern xmlns:ns1="urn:namespace">ns1:My*Service
        </service-name-pattern>
        <handler>...</handler>
    </handler-chain>

    <handler-chain>
        <port-name-pattern xmlns:ns1="urn:namespace">ns1:HelloPort
        </port-name-pattern>
        <handler>...</handler>
    </handler-chain>

    <handler-chain>
        <protocol-bindings>##SOAP11_HTTP</protocol-bindings>
        <handler>...</handler>
    </handler-chain>
</handler-chains>]]></programlisting>
            </informalexample>

            <para>Handlers will appear in the final handler chain in the order
            that they are included in the customization file. However, logical
            handlers will be sorted out and called before protocol handlers
            during execution.</para>

            <para>Starting from a Java class, annotations are used to describe
            the handler chain as defined by <link
            xlink:href="http://jcp.org/en/jsr/detail?id=181">JSR 181</link>.
            The following example uses the <literal>@HandlerChain</literal>
            annotation to refer to a file describing the chain.</para>

            <informalexample>
                <programlisting language="java"><![CDATA[import javax.jws.HandlerChain;
import javax.jws.WebService;

@WebService
@HandlerChain(file = "handlers.xml")
public class MyServiceImpl {
    // implementation of class
}]]></programlisting>
            </informalexample>

            <para>An example <literal>handlers.xml</literal> file is shown
            below. The schema is the same that is used for the
            customization.</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<jws:handler-chains xmlns:jws="http://java.sun.com/xml/ns/javaee">
    <jws:handler-chain>
        <jws:handler>
            <jws:handler-class>fromjava.handler_simple.common.TestHandler
            </jws:handler-class>
        </jws:handler>
    </jws:handler-chain>
</jws:handler-chains>]]></programlisting>
            </informalexample>

            <para>When packaging the service, the
            <filename>handlers.xml</filename> file must be in the classpath
            within the WAR file, either directly under
            <literal>WEB-INF/classes</literal> or further down in the same
            package as the service class file.</para>

            <para>On the server side, the handlers may be configured in the
            <filename>sun-jaxws.xml</filename>deployment descriptor as well. A
            handler chain specified here will override handlers in WSDL
            customizations or annotated classes. The schema for the handler
            section is the same as in the previous examples:</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<endpoints ...>
    <endpoint...>
        <handler-chains xmlns="http://java.sun.com/xml/ns/javaee">
            <handler-chain>
                ...
            </handler-chain>
        </handler-chains>
    </endpoint>
</endpoints>]]></programlisting>
            </informalexample>
        </section>

        <section xml:id="section-34700025143465">
            <title>Programmatic Case</title>

            <para>Handler chains may be configured on the client side at
            runtime by setting a chain directly on a
            <literal>BindingProvider</literal> (e.g., a
            <literal>Dispatch</literal> object or a port proxy) or by using a
            <literal>HandlerResolver</literal>. This example shows how to add
            a handler chain to a port proxy:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[// given proxy interface HelloPortType
HelloPortType myProxy = // create proxy

Binding binding = ((BindingProvider) myProxy).getBinding();

// can create new list or use existing one
List<Handler> handlerList = binding.getHandlerChain();

handlerList.add(new MyHandler());
binding.setHandlerChain(handlerList);]]></programlisting>
            </informalexample>

            <para>To configure the handlers that are added to newly created
            <literal>Binding</literal> objects, add a handler resolver to the
            service with <literal>setHandlerResolver()</literal>. The new
            resolver will be used whenever a
            <literal>BindingProvider</literal> is created from the service. An
            example resolver is as follows:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[/*
 * Add handlers to the returned list based on the information
 * in info.getBindingID(), getPortName(), and/or getServiceName().
 */
public class MyResolver implements HandlerResolver {
    
    public List<Handler> getHandlerChain(PortInfo info) {
        List<Handler> handlers = new ArrayList<Handler>();
        // add handlers to list based on PortInfo information
        return handlers;
    }
    
}]]></programlisting>
            </informalexample>

            <para>A resolver that modifies the initially configured handler
            chains could be written by calling
            <literal>service.getHandlerResolver()</literal> and passing the
            original resolver to a new one:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[// original HandlerResolver passed in constructor or setter method
public List<Handler> getHandlerChain(PortInfo info) {
    List<Handler> handlers = originalResolver.getHandlerChain(info);
    // alter list based on PortInfo information
    return handlers;
}]]></programlisting>
            </informalexample>
        </section>
    </section>

    <section xml:id="section-8594509924044">
        <title>Handler Samples</title>

        <para>The <application>fromjavahandler</application> and
        <application>fromwsdlhandler</application> samples set a
        <literal>SOAPHandler</literal> on the client and server. This handler
        simply outputs the contents of the SOAP message and can be used to see
        the requests and responses being passed back and forth. See the sample
        documentation for information on running the samples.</para>
    </section>
</section>
