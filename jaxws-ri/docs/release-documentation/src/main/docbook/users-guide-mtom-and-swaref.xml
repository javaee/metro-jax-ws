<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-mtom-and-swaref" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>MTOM and Swaref</title>

    <section xml:id="mtom-and-xop">
        <title>MTOM and XOP</title>

        <para><link xlink:href="http://www.w3.org/TR/soap12-mtom/">MTOM</link>
        (Message Transmission and Optimization Mechanism) together with <link
        xlink:href="http://www.w3.org/TR/xop10/">XOP</link> (XML Binary
        Optimized Packaging) defines how an XML binary data such as
        <literal>xs:base64Binary</literal> or <literal>xs:hexBinary</literal>
        can be optimally transmitted over the wire. XML type, such as
        <literal>xs:base64Binary</literal> is sent in lined inside the SOAP
        envelope. This gets quite in-efficient when the data size is more, for
        example a SOAP endpoint that exchanges images/songs etc. MTOM
        specifies how XOP packaging can be used to send the binary data
        optimally.</para>
    </section>

    <section xml:id="mtom-in-jaxws-2-0">
        <title>MTOM in JAX-WS 2.0</title>

        <para>MTOM feature is disabled in JAX-WS by default. It can be enabled
        on the client and server. Once enabled all the XML binary data, XML
        elements of type <literal>xs:base64Binary</literal> and
        <literal>xs:hexBinary</literal> is optimally transmitted. Currently
        MTOM works only with proxy port.</para>
        <para>Note: MTOM optimization is applied right at the time when JAX-WS writes 
        the message on to the wire. This is done to avoid any bufferring. Having 
        a handler means that JAX-WS transforms the Message in to DOM or 
        SOAPMessage. It results in inlined base64 encoded data and it remains so 
        when the data is written over the wire as attachment. This is done in 
        order to avoid unnecessary conversion to and from when handlers are being 
        used. In short: when handlers are used, MTOM optimization does not happen.
        </para>

        <section xml:id="xmmime-expectedmediatype-to-java">
            <title><literal>xmime:expectedContentType</literal> to Java type
            mapping</title>

            <para>An schema element of type <literal>xs:bas64Binary</literal>
            or <literal>xs:hexBinary</literal> can be annotated by using
            attribute reference using <link
            xlink:href="http://www.w3.org/TR/xml-media-types/"><literal>xmime:expectedContentType</literal></link>
            JAXB 2.0 specification defines
            <literal>xmime:expectedContentType</literal> to Java type mapping
            in <xref linkend="users-guide-mtom-and-swaref-table-1" />. Here is
            this table:</para>

            <table frame="all" xml:id="users-guide-mtom-and-swaref-table-1">
                <title><literal>xmime:expectedContentType</literal> to Java
                type mapping</title>

                <tgroup cols="2" colsep="1" rowsep="1">
                    <thead>
                        <row>
                            <entry>MIME Type</entry>

                            <entry>Java Type</entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry><para><literal>image/gif</literal></para></entry>

                            <entry><para><literal>java.awt.Image</literal></para></entry>
                        </row>

                        <row>
                            <entry><para><literal>image/jpeg</literal></para></entry>

                            <entry><para><literal>java.awt.Image</literal></para></entry>
                        </row>

                        <row>
                            <entry><para><literal>text/plain</literal></para></entry>

                            <entry><para><literal>java.lang.String</literal></para></entry>
                        </row>

                        <row>
                            <entry><para><literal>text/xml</literal> or
                            <literal>application/xml</literal></para></entry>

                            <entry><para><literal>javax.xml.transform.Source</literal></para></entry>
                        </row>

                        <row>
                            <entry><para><literal>*/*</literal></para></entry>

                            <entry><para><literal>javax.activation.DataHandler</literal></para></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <informalexample>
                <programlisting language="xml"><![CDATA[<element name="image" type="base64Binary"/>]]></programlisting>
            </informalexample>

            <para>is mapped to <literal role="bold">byte[]</literal></para>

            <informalexample>
                <programlisting><![CDATA[<element name="image" type="base64Binary"
        ]]><emphasis role="bold">xmime:expectedContentTypes="image/jpeg"</emphasis><![CDATA[
        xmlns:xmime="http://www.w3.org/2005/05/xmlmime"/>]]></programlisting>
            </informalexample>

            <para>is mapped to <literal>java.awt.Image</literal></para>
        </section>

        <section xml:id="xmime-contenttype-schema-annotation">
            <title><literal>xmime:contentType</literal> schema
            annotation</title>

            <para><link
            xlink:href="http://www.w3.org/TR/xml-media-types/"><literal>xmime:contentType</literal></link>
            schema annotation indicates the content-type of an XML element
            content whose type is <literal>xs:base64Binary</literal> or
            <literal>xs:hexBinary</literal>. The value of the attribute is a
            valid <literal>content-type</literal> string (e.g.,
            "<literal>text/xml; charset=utf-16</literal>"). This attribute
            specifies the <literal>content-type</literal> of the element
            content on which it occurs. This annotation can be primarily used
            to indicate the <literal>Content-Type</literal> of binary
            data.</para>

            <para>For example the schema type</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<element name="TestMtomXmimeContentType" type="types:PictureType"/>
<complexType name="PictureType">
    <simpleContent>
        <restriction base="xmime:base64Binary">
            <attribute ref="xmime:contentType" use="required"/>
        </restriction>
    </simpleContent>
</complexType>]]></programlisting>
            </informalexample>

            <para>Here <literal>xmime:base64Binary</literal> is defined by
            <link
            xlink:href="http://www.w3.org/TR/xml-media-types/#schema">Describing
            Media Content of Binary Data in XML</link>.</para>

            <para>Gets mapped to PicutreType bean by
            <command>wsimport</command>:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[ ]]><literal>PictureType req = new PictureType();
req.setValue(name.getBytes());
req.setContentType("application/xml");</literal><![CDATA[ ]]></programlisting>
            </informalexample>

            <para>On the wire this is how it looks:</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[ ]]><literal>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;soapenv:Envelope xmlns:soapenv=" http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:xsd=" http://www.w3.org/2001/XMLSchema"
        xmlns:ns1=" http://example.org/mtom/data"
        xmlns:ns2="http://www.w3.org/2005/05/xmlmime"&gt;
    &lt;soapenv:Body&gt;
        &lt;ns1:TestMtomXmimeContentTypeResponse
                ns2:contentType="application/xml"&gt;
            &lt;xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include"
                    href="c id:193ed174-d313-4325-8eed-16cc25595e4e@example.org"/&gt;
        &lt;/ns1:TestMtomXmimeContentTypeResponse&gt;
    &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</literal><![CDATA[ ]]></programlisting>
            </informalexample>
        </section>

        <section xml:id="how-to-enable-mtom-in-jaxws-2-0">
            <title>How to enable MTOM in JAX-WS 2.0</title>

            <para><emphasis role="bold">Enabling MTOM on
            Server:</emphasis></para>

            <itemizedlist>
                <listitem>
                    <para>Enable using
                    <literal>@javax.xml.ws.soap.MTOM</literal> annotation on
                    the endpoint (SEI) implementation class <informalexample>
                            <programlisting language="java"><![CDATA[@javax.xml.ws.soap.MTOM
@WebService(endpointInterface = "mtom.server.Hello")
public class HelloImpl implements Hello {
    // ...
}]]></programlisting>
                        </informalexample></para>
                </listitem>
            </itemizedlist>

            <itemizedlist>
                <listitem>
                    <para>MTOM can be also be enabled on an endpoint by
                    specifying enable-mtom attribute to true on an endpoint
                    element in sun-jaxws.xml 
                    deployment descriptor. <informalexample>
                            <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<endpoints xmlns='http://java.sun.com/xml/ns/jax-ws/ri/runtime'
        version='2.0'>
    <endpoint name="Mtom"
            implementation="mtom.server.HelloImpl"
            url-pattern="/hello"
            enable-mtom="true"/>
</endpoints>]]></programlisting>
                        </informalexample></para>
                </listitem>
            </itemizedlist>

            <itemizedlist>
                <listitem>
                    <para>Enable using <literal>@BindingType</literal> on the
                    endpoint (SEI) implementation class <itemizedlist>
                            <listitem>
                                <para><literal>@BindingType(value=javax.xml.ws.soap.SOAPBinding.SOAP11HTTP_MTOM_BINDING)</literal>
                                will enable MTOM on the deployed endpoint for SOAP
                                1.1 binding</para>
                            </listitem>

                            <listitem>
                                <para><literal>@BindingType(value=javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_MTOM_BINDING)</literal>
                                will enable MTOM on the deployed endpoint for SOAP
                                1.2 binding</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>
            </itemizedlist>

            <para><emphasis role="bold">Enabling MTOM on
            Client:</emphasis></para>

            <itemizedlist>
                <listitem>
                    <para>To enable MTOM on client-side, pass
                    javax.xml.ws.soap.MTOMFeature as WebServiceFeature
                    parameter while crating the Proxy or Dispatch. Here is the
                    code snippet from the client <literal>samples/mtom/src/mtom/client/MtomApp.java</literal>
                    of the mtom sample: <itemizedlist>
                            <listitem>
                                <para>Hello port = new
                                HelloService().getHelloPort(new MTOMFeature());
                                gives a proxy with MTOM enabled</para>
                            </listitem>

                            <listitem>
                                <para>javax.xml.ws.Service.createDispatch(....,new
                                javax.xml.ws.soap.MTOMFeature()) gives a Dispatch
                                instance with MTOM enabled</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>

                <listitem>
                    <para>JAX-WS 2.0 specification has defined API to enable
                    and to check if the MTOM is enabled. <itemizedlist>
                            <listitem>
                                <para>javax.xml.ws.soap.SOAPBinding.setMTOMEnabled(boolean
                                enable) - enable or disable MTOM.</para>
                            </listitem>

                            <listitem>
                                <para>javax.xml.ws.soap.SOAPBinding.isMTOMEnabled()
                                - returns true if MTOM is enabled otherwise
                                false.</para>
                            </listitem>
                        </itemizedlist><informalexample>
                            <programlisting language="java"><![CDATA[Hello port = new HelloService.getHelloPort();
//get the binding and enable mtom
SOAPBinding binding = (SOAPBinding) ((BindingProvider) port).getBinding();
boolean mtomEnabled = binding.isMTOMEnabled();

binding.setMTOMEnabled(true);]]></programlisting>
                        </informalexample></para>
                </listitem>
            </itemizedlist>
        </section>

        <section xml:id="attach-vs-in-line">
            <title>Attach vs In-line</title>

            <para>As defined by JAXB 2.0 specification
            <literal>xs:base64Binary</literal> and
            <literal>xs:hexBinary</literal> mapping to java is
            <literal>byte[]</literal>. JAX-WS implementation has set a
            threshold of 1KB of <literal>byte[]</literal> size. This threshold
            can be modified using implementation specific property
            <literal>com.sun.xml.ws.developer.JAXWSProperties.MTOM_THRESHOLD_VALUE</literal>
            in the <literal>RequestContext</literal> on the client side and in
            the <literal>MessageContext</literal> on the server side. If the
            <literal>byte[]</literal> that is being sent is less than this
            threshold (default is 1KB) then the binary data is base64 encoded
            by JAXB and in lined inside the SOAP Body otherwise the binary
            data is sent as attachment mime part in Multipart/Related package
            and XML infoset for the binary data is XOP encoded by JAXB
            <programlisting><![CDATA[<xop:Include href=...>]]></programlisting>is
            used to reference the attachment. The XOP encoding and packaging
            is done as per described by the <link
            xlink:href="http://www.w3.org/TR/xop10/#xop_packages">XOP
            packaging rules</link>. The href is the the
            <literal>Content-ID</literal> of the attachment and is encoded as
            per CID URI scheme defined in <link
            xlink:href="http://www.faqs.org/rfcs/rfc2111.html">RFC
            2111</link>. <literal>xmime:contentType</literal> attribute may
            appear on the element that includes binary data to indicate
            preferred media type as annotated on the corresponding
            schema.</para>

            <section xml:id="mtom-threshold">
                <title>How to specify MTOM data Threshold</title>

                <para>Default threshold value for MTOM feature is 0 bytes. You
                can set a threshold value for MTOM by using
                <literal>@MTOM</literal> annotation on server-side or using
                MTOMFeature on client-side. Let's say you set MTOM threshold
                as 3000, this serves as hint to JAX-WS when to send binary dat
                as attachments. In this case, JAX-WS will send any byte array
                in the message thats equal to or larger than 3KB as attachment
                and the corresponding XML infoset will be XOP encoded (will
                contain reference to this attachment)</para>

                <itemizedlist>
                    <listitem>
                        <para>On Server-side,
                        <literal>@MTOM(threshold=3000)</literal></para>
                    </listitem>

                    <listitem>
                        <para>On Client-side, pass
                        <literal>MTOMFeature(3000)</literal> as
                        <literal>WebServiceFeature</literal> as mentioned in
                        <xref linkend="how-to-enable-mtom-in-jaxws-2-0" />,
                        while creating the proxy/dispatch.</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>

        <section xml:id="mtom-samples">
            <title>MTOM Samples</title>

            <example xml:id="mtom">
                <title>MTOM Sample - mtom</title>

                <para>This is SOAP 1.1 MTOM SampleThis is how the JAX-WS
                generated XOP packaged SOAP message looks on the wire:</para>

                <informalexample>
                    <programlisting><![CDATA[Content-Type: Multipart/Related; ]]><emphasis
                            role="bold">start-info="text/xml";</emphasis><![CDATA[ ]]><emphasis
                            role="bold">type="application/xop+xml";</emphasis><![CDATA[
    boundary="----=_Part_0_1744155.1118953559416"
Content-Length: 3453
SOAPAction: ""

    ------=_Part_1_4558657.1118953559446
Content-Type: ]]><emphasis role="bold">application/xop+xml; type="text/xml";</emphasis><![CDATA[ charset=utf-8

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
    <soapenv:Body>
        <Detail xmlns="http://example.org/mtom/data">
            <Photo>RHVrZQ==</Photo>
            <image>
                ]]><emphasis role="bold">&lt;xop:Include
                        xmlns:xop="http://www.w3.org/2004/08/xop/include"
                        href="cid:5aeaa450-17f0-4484-b845-a8480c363444@example.org"/&gt;</emphasis><![CDATA[
            </image>
        </Detail>
    </soapenv:Body>
</soapenv:Envelope>

------=_Part_1_4558657.1118953559446
Content-Type: image/jpeg
Content-ID: <5aeaa450-17f0-4484-b845-a8480c363444@example.org>

 ╪
    α ►JFIF ☺☻ ☺ ☺ █ ♠♠
♀¶
♀♂♂♀↓↕‼☼¶↔→▼▲↔→∟∟
    $.' ",#∟∟(7),01444▼'9=82<.342 █ C☺ ♀♂♀↑↑2!∟!22222222222222222222222222222222222222222222
    
222222 └ ) ¬♥☺" ☻◄☺♥◄☺ ─ ▼ ☺♣☺☺☺☺☺☺
    ☺☻♥♦ ♂ ─ ╡► ☻☺♥♥☻♦♥♣♣♦♦
    ☺}☺☻♥ ♦◄♣↕!1A♠‼Qa"q¶2?#B▒┴§R╤≡$3bré
    
▬↨↑↓→%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzâäàåçêëèÆôöòûùÿÖÜóúñÑªº¿⌐¬▓│┤╡╢╖╕╣║┬├─┼╞╟╚╔╩╥╙╘╒╓╫╪┘┌ßΓπΣσµτΦΘΩ±≥≤⌠⌡÷≈°∙·
    ─]]></programlisting>
                </informalexample>

                <para>Above Photo is inlined binary data because its less than
                1KB and image which is more than 1KB is sent as attachment.
                Here is the associated schema:</para>

                <informalexample>
                    <programlisting language="xml"><![CDATA[<element name="Detail" type="types:DetailType"/>
<complexType name="DetailType">
    <sequence>
        <!-- mapped to byte[] -->
        <element name="Photo" type="base64Binary"/>
        <!-- mapped tojava.awt.Image -->
        <element name="image" type="base64Binary"
                ]]><emphasis role="bold">xmime:expectedContentTypes="image/jpeg"</emphasis><![CDATA[/>
    </sequence>
</complexType>]]></programlisting>
                </informalexample>
            </example>

            <example xml:id="mtom-soap12">
                <title>MTOM Sample - mtom-soap12</title>

                <para>This is SOAP 1.2 MTOM Sample. Here is how the JAX-WS
                generated soap message looks on the wire:</para>

                <informalexample>
                    <programlisting><![CDATA[<element name="image" type="base64Binary" ]]><emphasis
                            role="bold">xmime:expectedContentTypes="image/jpeg"</emphasis><![CDATA[/>

Content-Type:
    Multipart/Related; ]]><emphasis role="bold">start-info="application/soap+xml"; type="application/xop+xml";</emphasis><![CDATA[
    boundary="----=_Part_0_1744155.1118960238280"
Content-Length: 1946
SOAPAction: ""

------=_Part_1_4558657.1118960238320
Content-Type: ]]><emphasis role="bold">application/xop+xml</emphasis><![CDATA[; type="]]><emphasis
                            role="bold">application/soap+xml</emphasis><![CDATA["; charset=utf-8

<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">
    <soapenv:Body>
        <Detail xmlns="http://example.org/mtom/data">
            <Photo>RHVrZQ==</Photo>
            <image>
                ]]><emphasis role="bold">&lt;xop:Include
                        xmlns:xop="http://www.w3.org/2004/08/xop/include"
                        href="cid:42a7ee0a-20ee-426b-a135-094d72bc138f@example.org"/&gt;</emphasis><![CDATA[
            </image>
        </Detail>
    </soapenv:Body>
</soapenv:Envelope>

------=_Part_1_4558657.1118960238320
Content-Type: application/octet-stream
Content-ID: <42a7ee0a-20ee-426b-a135-094d72bc138f@example.org>

 ╪ α ►JFIF ☺☻ ☺ ☺ █ ♠♠
♀¶

    ♀♂♂♀↓↕‼☼¶↔→▼▲↔→∟∟
    $.' ",#∟∟(7),01444▼'9=82<.342 █ C☺ ♀♂♀↑↑2!∟!22222222222222222222222222222222222222222222
    
222222 └ ' )♥☺" ☻◄☺♥◄☺ ─ ▼ ☺♣☺☺☺☺☺☺
    ☺☻♥♦ ♂ ─ ╡► ☻☺♥♥☻♦♥♣♣♦♦
    ☺}☺☻♥ ♦◄♣↕!1A♠‼Qa"q¶2?#B▒┴§R╤≡$3bré
    
▬↨↑↓→%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzâäàåçêëèÆôöòûùÿÖÜóúñÑªº¿⌐¬▓│┤╡╢╖╕╣║┬├─┼╞╟╚╔╩╥╙╘╒╓╫╪┘┌ßΓπΣσµτΦΘΩ±≥≤⌠⌡÷≈°∙·
    ─
 ▼☺ ♥☺☺☺☺☺☺☺☺☺ ☺☻♥♦]]></programlisting>
                </informalexample>
            </example>
        </section>
    </section>

    <section xml:id="swaref">
        <title>swaRef</title>

        <para><link
        xlink:href="http://www.ws-i.org/Profiles/AttachmentsProfile-1.0-2004-08-24.html">WS-I
        Attachment Profile 1.0</link> defines mechanism to reference MIME
        attachment parts using <link
        xlink:href="http://www.ws-i.org/Profiles/AttachmentsProfile-1.0.html#Example_Attachment_Description_Using_swaRef">swaRef</link>.
        In this mechanism the content of XML element of type <link
        xlink:href="http://ws-i.org/profiles/basic/1.1/xsd/"><literal>wsi:swaRef</literal></link>
        is sent as MIME attachment and the element inside SOAP Body holds the
        reference to this attachment in the CID URI scheme as defined by <link
        xlink:href="http://www.faqs.org/rfcs/rfc2111.html">RFC
        2111</link>.</para>

        <section xml:id="swaref-in-jaxws-2-0">
            <title>swaRef in JAX-WS 2.0</title>

            <para>JAXB 2.0 defines mapping of <literal>wsi:swaRef</literal>
            schema type to javax.activation.DataHandler. An application will
            construct the DataHandler with the data and the appropriate MIME
            type and JAX-WS will coordinate with JAXB and SAAJ to send it as
            attachment MIME part.</para>
        </section>

        <section xml:id="how-to-use-swaref">
            <title>How to use swaRef</title>

            <para>An XML element of type <literal>wsi:swaRef</literal> is
            mapped to a DataHandler and is sent as attachment over the wire.
            For example,</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<element name="claimForm" type="]]><emphasis
                        role="bold">wsi:swaRef</emphasis><![CDATA["
        xmlns:wsi="http://ws-i.org/profiles/basic/1.1/xsd"/>]]></programlisting>
            </informalexample>

            <para>will be sent over the wire as :</para>

            <informalexample>
                <programlisting><![CDATA[Content-Type: Multipart/Related; start-info="text/xml"; type="application/xop+xml";
    boundary="----=_Part_4_32542424.1118953563492"
Content-Length: 1193
SOAPAction: ""

------=_Part_5_32550604.1118953563502
Content-Type: application/xop+xml; type="text/xml"; charset=utf-8

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
    <soapenv:Body>
        <claimForm xmlns="http://example.org/mtom/data">
            ]]><emphasis role="bold">cid:b0a597fd-5ef7-4f0c-9d85-6666239f1d25@example.jaxws.sun.com</emphasis><![CDATA[
        </claimForm>
    </soapenv:Body>
</soapenv:Envelope>

------=_Part_5_32550604.1118953563502
Content-Type: application/xml
Content-ID: <]]><emphasis role="bold">b0a597fd-5ef7-4f0c-9d85-6666239f1d25@example.jaxws.sun.com</emphasis><![CDATA[>

<?xml version="1.0" encoding="UTF-8"?>
<application xmlns="http://java.sun.com/xml/ns/j2ee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocaption="http://java.sun.com/xml/ns/j2ee
    http://java.sun.com/xml/ns/j2ee/application_1_4.xsd" version="1.4">
    <display-name>Simple example of application</display-name>
    <description>Simple example</description>
    <module>
        <ejb>ejb1.jar</ejb>
    </module>
    <module>
        <ejb>ejb2.jar</ejb>
    </module>
    <module>
        <web>
            <web-uri>web.war</web-uri>
            <context-root>web</context-root>
        </web>
    </module>
</application>]]></programlisting>
            </informalexample>
        </section>

        <section xml:id="swaref-samples">
            <title>swaRef Sample</title>

            <para>Refer to <application>swaRef</application> sample
            <literal>testSwaRef()</literal> method in <literal>samples/mime/src/mime/client/MimeApp.java</literal></para>
        </section>
    </section>
</section>
