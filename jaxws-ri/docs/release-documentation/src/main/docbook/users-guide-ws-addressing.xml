<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-ws-addressing" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>WS-Addressing</title>

    <section xml:id="ws-addressing-in">
        <title>WS-Addressing in &jax-ws.product.name.short;</title>

        <para><link xlink:href="http://www.w3.org/2002/ws/addr/">Web Services
        Addressing</link> provides transport-neutral mechanisms to address Web
        services and messages. JAX-WS 2.2 specification requires support for
        W3C <link xlink:href="http://www.w3.org/TR/ws-addr-core">Core</link>,
        <link xlink:href="http://www.w3.org/TR/ws-addr-soap">SOAP
        Binding</link> and <link
        xlink:href="http://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904">Addressing
        1.0 - Metadata</link> specifications and defines standard API to
        enable/disable W3C WS-Addressing on the client and service endpoint.
        In addition to that, &jax-ws.product.name.short; also supports <link
        xlink:href="http://www.w3.org/Submission/ws-addressing/">Member
        Submission</link> version of WS-Addressing. The member submission
        version is supported in an implementation specific way.Â  For
        compatility with JAX-WS 2.1 behavior, &jax-ws.product.name; also
        supports wsdls conforming to <link
        xlink:href="http://www.w3.org/TR/ws-addr-wsdl">WSDL Binding</link>
        specification. The subsequent sections describe how the two
        WS-Addressing versions can be enabled/disabled on client and server
        side .</para>
    </section>

    <section xml:id="why-ws-addressing">
        <title>Why WS-Addressing?</title>

        <para>The subsequent sections explain the different use cases served
        by WS-Addressing.</para>

        <section xml:id="transport-neutrality">
            <title>Transport Neutrality</title>

            <para>This section describes how a message can be sent to a Web
            service endpoint in transport neutral manner.</para>

            <example>
                <title>SOAP 1.2 message, without WS-Addressing, sent over
                HTTP</title>

                <programlistingco>
                    <areaspec>
                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex1-1">
                            <area coords="1"></area>
                        </areaset>

                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex1-2">
                            <area coords="5"></area>
                        </areaset>
                    </areaspec>

                    <programlisting language="xml"><![CDATA[POST /fabrikam/Purchasing HTTP 1.1/POST
Host: example.com
SOAPAction: http://example.com/fabrikam/SubmitPO

<S:Envelope
        xmlns:S="http://www.w3.org/2003/05/soap-envelope"
        xmlns:wombat="http://wombat.org/">
    <S:Header>
        <wombat:MessageID>
            uuid:e197db59-0982-4c9c-9702-4234d204f7f4
        </wombat:MessageID>
    </S:Header>
    <S:Body>
        ...
    </S:Body>
</S:Envelope>]]></programlisting>

                    <calloutlist>
                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex1-1">
                            <para>HTTP transport headers.</para>
                        </callout>

                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex1-2">
                            <para>SOAP message in HTTP body.</para>
                        </callout>
                    </calloutlist>
                </programlistingco>

                <para>The host (<literal>example.com</literal>), the dispatch
                method (<literal>POST</literal>) and the URL to dispatch to
                (<literal>/fabrikam/Purchasing</literal>) are in the HTTP
                transport headers. The actual message and implied meaning (for
                example payload's <literal>QName</literal> or
                <literal>SOAPAction</literal>) is defined by the messaging
                system (<literal>SOAP</literal>) or transport protocol
                (<literal>HTTP</literal>). If the message is to be sent over
                an alternate transport, such as SMTP, then the information
                conveyed in HTTP transport headers need to be mapped to SMTP
                specific headers. On the server side, to dispatch
                successfully, a Web service stack has to gather the
                information from the SMTP (as opposed to HTTP) headers and the
                SOAP message.</para>
            </example>

            <para>Also in the above message, there is no standard header to
            establish the identity of a message. In this case,
            <literal>MessageID</literal> header defined in the namespace URI
            bound to <literal>wombat</literal> prefix is used but is
            application specific and is thus not re-usable.</para>

            <para>WS-Addressing introduce Message Addressing Properties that
            collectively augment a message to normalize this
            information.</para>

            <example>
                <title>SOAP 1.2 message, with WS-Addressing, sent over
                HTTP</title>

                <programlistingco>
                    <areaspec>
                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex2-1">
                            <area coords="1"></area>
                        </areaset>

                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex2-2">
                            <area coords="5"></area>
                        </areaset>

                        <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex2-3">
                            <area coords="9"></area>
                        </areaset>
                    </areaspec>

                    <programlisting language="xml"><![CDATA[POST /fabrikam/Purchasing HTTP 1.1/POST
Host: example.com
SOAPAction: http://example.com/fabrikam/SubmitPO

<S:Envelope
        xmlns:S="http://www.w3.org/2003/05/soap-envelope"
        ]]><emphasis role="bold">xmlns:wsa="http://www.w3.org/2005/08/addressing/"</emphasis><![CDATA[>
    <S:Header>
        ]]><emphasis role="bold">&lt;wsa:MessageID&gt;
            uuid:e197db59-0982-4c9c-9702-4234d204f7f4
        &lt;/wsa:MessageID&gt;
        &lt;wsa:To&gt;
            http://example.com/fabrikam/Purchasing
        &lt;/wsa:To&gt;
        &lt;wsa:Action&gt;
            http://example.com/fabrikam/SubmitPO
        &lt;/wsa:Action&gt;</emphasis><![CDATA[
    </S:Header>
    <S:Body>
        ...
    </S:Body>
</S:Envelope>]]></programlisting>

                    <calloutlist>
                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-1">
                            <para>HTTP transport headers.</para>
                        </callout>

                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-2">
                            <para>SOAP message in HTTP body.</para>
                        </callout>

                        <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-3">
                            <para>Binding of Message Addressing Properties to
                            SOAP 1.2 message.</para>
                        </callout>
                    </calloutlist>
                </programlistingco>

                <para>For example, <literal>wsa:MessageID</literal> is a
                binding of an abstract property that defines an absolute URI
                that uniquely identifies the message,
                <literal>wsa:To</literal> is binding of an abstract absolute
                URI representing the address of the intended receiver of this
                message and <literal>wsa:Action</literal> is binding of an
                abstract absolute IRI that uniquely identifies the semantics
                implied by this message. All the information earlier shared
                between transport protocols and messaging systems is now
                normalized into a uniform format that can be processed
                independent of transport or application.</para>

                <para>If the exactly same message is to be sent/received using
                a different transport, for example asynchronously over SMTP,
                then the value of <literal>wsa:To</literal> header could be
                changed to <literal>mailto:purchasing@example.com</literal>.
                The updated <literal>wsa:To</literal> header looks
                like:</para>

                <programlisting language="xml"><![CDATA[<wsa:To>
    ]]><emphasis role="bold">mailto:purchasing@example.com</emphasis><![CDATA[
</wsa:To>]]></programlisting>

                <para>On the server side, Web services stack can gather all
                the information from the SOAP message and then dispatch it
                correctly.</para>
            </example>
        </section>

        <section xml:id="stateful-webservice">
            <title>Stateful Web service</title>

            <para>Web services are usually stateless, i.e. the service
            endpoint receives a request and responds back without saving any
            processing state in between different requests. However making Web
            services stateful enables to share multiple instances of service
            endpoints. For example, consider a stateful Bank Web service. The
            client (say bank customer) can obtain a bank EPR, with relevant
            state information stored as reference parameters, and invoke a
            method on that EPR to do a series of banking operations. On the
            service endpoint, whenever a request is received, the reference
            parameters from the EPR are available as first-class SOAP headers
            allowing the endpoint to restore the state.</para>

            <para>&jax-ws.product.name; enables <link xlink:href="#users-guide-stateful-webservice">stateful
            Web services</link>Â to be annotated with
            <literal>com.sun.xml.ws.developer.Stateful</literal>
            annotation.</para>
        </section>

        <section xml:id="simple-and-complex-meps">
            <title>Simple and Complex MEPs</title>

            <para>WS-Addressing defines standard <link
            xlink:href="http://www.w3.org/TR/2006/REC-ws-addr-core-20060509/#abstractmaps">Message
            Addressing Properties</link> (MAPs) to support simple and complex
            message patterns. The SOAP Binding defines a mapping of these MAPs
            to SOAP headers and convey end-to-end message characteristics
            including addressing for source and destination endpoints as well
            as message identity. For example <literal>destination</literal>
            MAP represents an absolute IRI representing the address of the
            intended receiver of the message and is mapped to a SOAP header
            with <literal>wsa:To</literal> element name. <literal>reply
            endpoint</literal> represents an endpoint reference for the
            intended receiver for replies to this message and is mapped to a
            SOAP header with <literal>wsa:ReplyTo</literal> element name.Â  In
            addition, WSDL Binding, also defines requirement on the presence
            of these MAPs for standard Message Exchange Patterns (MEPs) such
            as <link
            xlink:href="http://www.w3.org/TR/wsdl#_request-response">request/response</link>
            and <link
            xlink:href="http://www.w3.org/TR/wsdl#_one-way">one-way</link>.</para>

            <para>Using these MAPs, complex MEPs can be created. For
            example:</para>

            <orderedlist>
                <listitem>
                    <para><emphasis role="bold">Asynchronous MEP</emphasis>:
                    Using <literal>reply endpoint</literal> MAP, an
                    asynchronous transport may be specified for a synchronous
                    request. For example, a client application might send a
                    request over HTTP and ask to receive the response through
                    SMTP.</para>
                </listitem>

                <listitem>
                    <para><emphasis role="bold">Conversation MEP</emphasis>:
                    Using <literal>relationship</literal> MAP, that defines
                    the relationship between two messages, a conversational
                    MEP can be defined by correlating multiple
                    request/response MEPs. For example a client sending a
                    request to service endpoint receives a response with
                    <literal>wsa:RelatesTo</literal> MAP. The service endpoint
                    may optionally include <literal>wsa:MessageID</literal> in
                    the response. This MAP can then be included by the client
                    in <literal>wsa:RelatesTo</literal> MAP in next request to
                    the service endpoint there by starting a
                    conversation.</para>
                </listitem>

                <listitem>
                    <para><emphasis role="bold">Distributed MEP</emphasis>:
                    Using <literal>reply endpoint</literal> and <literal>fault
                    endpoint</literal> MAP, a different transport/address can
                    be specified for receiving normal and fault responses
                    respectively.</para>
                </listitem>
            </orderedlist>
        </section>

        <section xml:id="composability-with-other-ws-specifications">
            <title>Composability with other WS-* specifications</title>

            <para>There are several Web services specification (commonly known
            as <link xlink:href="http://en.wikipedia.org/wiki/WS-*">WS-*
            specs</link>) that make use of the abstract properties defined by
            WS-Addressing. For example <link
            xlink:href="http://en.wikipedia.org/wiki/WS-MetadataExchange">WS-Metadata
            Exchange</link> define a bootstrap mechanism for retrieving
            metadata before the business message exchange can take place. This
            mechanism involve sending a <link
            xlink:href="http://www.w3.org/Submission/WS-Transfer/">WS-Transfer</link>
            request for the retrieval of a resource's representation. A
            typical request message looks like:</para>

            <programlistingco>
                <areaspec>
                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex3-1">
                        <area coords="1"></area>
                    </areaset>

                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex3-2">
                        <area coords="3"></area>
                    </areaset>

                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex3-3">
                        <area coords="5"></area>
                    </areaset>
                </areaspec>

                <programlisting language="xml"><![CDATA[<s11:Envelope
        xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
        ]]><emphasis role="bold">xmlns:wsa="http://www.w3.org/2005/08/addressing"</emphasis><![CDATA[>
    <s11:Header>
        <wsa:Action>
            ]]><emphasis role="bold">http://schemas.xmlsoap.org/ws/2004/09/transfer/Get</emphasis><![CDATA[
        </wsa:Action>
        <wsa:To>http://example.org/metadata</wsa10:To>
        <wsa:ReplyTo>
            <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous
            </wsa10:Address>
        </wsa:ReplyTo>
        <wsa:MessageID>
            uuid: 68da6b24-7fa1-4da2-8a06-e615bfa3d2d0
        </wsa:MessageID>
    </s11:Header>
    <s11:Body/>
</s11:Envelope>]]></programlisting>

                <calloutlist>
                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex3-1">
                        <para>SOAP request message to retrieve metadata about
                        a Web service endpoint.</para>
                    </callout>

                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex3-2">
                        <para>WS-Addressing namespace URI bound to
                        "<literal>wsa</literal>" prefix.</para>
                    </callout>

                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex2-3">
                        <para>The standard WS-Addressing MAPs used to convey
                        the semantics (<literal>wsa:Action</literal>),
                        receiver (<literal>wsa:To</literal>) of the message,
                        intended receiver of reply
                        (<literal>wsa:ReplyTo</literal>) message and identity
                        (<literal>wsa:MessageID</literal>) information of the
                        message</para>
                    </callout>
                </calloutlist>
            </programlistingco>

            <para>This message has an empty SOAP Body and relies completely
            upon standard MAPs to convey all the information. Similarly, a
            WS-Metadata Exchange response message with metadata looks
            like:</para>

            <programlistingco>
                <areaspec>
                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex4-1">
                        <area coords="5"></area>
                    </areaset>

                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex4-2">
                        <area coords="12"></area>
                    </areaset>
                </areaspec>

                <programlisting language="xml"><![CDATA[<s11:Envelope
        xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
        ]]><emphasis role="bold">xmlns:wsa="http://www.w3.org/2005/08/addressing"</emphasis><![CDATA[>
    <s11:Header>
        <wsa:Action>
            ]]><emphasis role="bold">http://schemas.xmlsoap.org/ws/2004/09/transfer/GetResponse</emphasis><![CDATA[
        </wsa:Action>
        <wsa:RelatesTo>
            uuid: 68da6b24-7fa1-4da2-8a06-e615bfa3d2d0
        </wsa:RelatesTo>
    </s11:Header>
    <s11:Body/>
    ...
    <s11:Body/>
</s11:Envelope>]]></programlisting>

                <calloutlist>
                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex4-1">
                        <para>The standard WS-Addressing MAPs used to convey
                        the semantics (<literal>wsa:Action</literal>) of the
                        response message and relationship
                        (<literal>wsa:RelatesTo</literal>) to the request
                        message.</para>
                    </callout>

                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex4-2">
                        <para>Abbreviated SOAP Body for simplicity which
                        otherwise would contain the MEX response.</para>
                    </callout>
                </calloutlist>
            </programlistingco>

            <para><link
            xlink:href="http://en.wikipedia.org/wiki/WS-ReliableMessaging">WS-Reliable
            Messaging</link> describes a protocol that allows messages to be
            delivered reliably between distributed applications in the
            presence of software component, system or network failures. This
            specification defines protocol messages that must be exchanged
            between client and service endpoint, before the business message
            exchange, in order to deliver the messages reliably. For example,
            RM Source sends <literal>&lt;CreateSequence&gt;</literal> request
            message to RM Destination to create an outbound sequence. The
            message looks like:</para>

            <programlistingco>
                <areaspec>
                    <areaset xml:id="users-guide-why-ws-addressing-neutrality-ex5-1">
                        <area coords="5"></area>
                    </areaset>
                </areaspec>

                <programlisting language="xml"><![CDATA[<s11:Envelope
        xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
        ]]><emphasis role="bold">xmlns:wsa=" http://www.w3.org/2005/08/addressing"</emphasis><![CDATA[
        xmlns:wsrm=" http://schemas.xmlsoap.org/ws/2005/02/rm">
    <s11:Body>
        <wsrm:CreateSequence>
            ]]><emphasis role="bold">&lt;wsrm:AcksTo&gt;</emphasis><![CDATA[
                <wsa:Address>
                    http://www.w3.org/2005/08/addressing/anonymous
                </wsa:Address>
            ]]><emphasis role="bold">&lt;/wsrm:AcksTo&gt;</emphasis><![CDATA[
        </wsrm:CreateSequence>
    </s11:Body>
</s11:Envelope>]]></programlisting>

                <calloutlist>
                    <callout arearefs="users-guide-why-ws-addressing-neutrality-ex4-1">
                        <para>SOAP Body of the request message.</para>
                    </callout>
                </calloutlist>
            </programlistingco>

            <para>The Body contains an element, <literal>wsrm:AcksTo</literal>
            (of the type Endpoint Reference), that specifies the endpoint
            reference to which
            <literal>&lt;SequenceAcknowledgement&gt;</literal> messages and
            faults related to sequence creation are sent.</para>

            <para>WS-Secure Conversation, WS-Trust, WS-Policy and other
            similar specifications use the constructs defined by WS-Addressing
            as building blocks.</para>
        </section>
    </section>

    <section xml:id="ws-addressing-versions">
        <title>WS-Addressing Versions</title>

        <para>There are two prominent versions of WS-Addressing that are
        commonly used:Â </para>

        <itemizedlist>
            <listitem>
                <para><link xlink:href="http://www.w3.org/2002/ws/addr/">W3C
                WS-Addressing</link></para>
            </listitem>

            <listitem>
                <para><link
                xlink:href="http://www.w3.org/Submission/ws-addressing/">Member
                Submission WS-Addressing</link></para>
            </listitem>
        </itemizedlist>

        <para>Sun, IBM, BEA, Microsoft and SAP co-authored and submitted a
        WS-Addressing specification to W3C in August 2004. W3C chartered a new
        Working Group with a mission to produce a <link
        xlink:href="http://www.w3.org/2005/10/Process-20051014/tr.html#RecsW3C">W3C
        Recommendation</link> for WS-Addressing by refining the submitted
        specification. The original specification submitted to W3C is referred
        as "Member Submission WS-Addressing" or "Submission WS-Addressing".
        The term <link
        xlink:href="http://www.w3.org/2005/10/Process-20051014/submission.html#Submission">Member
        Submission</link> is defined by W3C.</para>

        <para>The WG was <link
        xlink:href="http://www.w3.org/2006/10/ws-addr-charter.html#deliverables">chartered</link>
        to deliver a W3C Recommendation for WS-Addressing <link
        xlink:href="http://www.w3.org/TR/ws-addr-core">Core</link>, <link
        xlink:href="http://www.w3.org/TR/ws-addr-soap">SOAP Binding</link>
        (mapping abstract properties defined in Core to SOAP 1.1 and 1.2) and
        <link xlink:href="http://www.w3.org/TR/ws-addr-wsdl">WSDL
        Binding</link> (mechanisms to define property values in WSDL 1.1 and
        WSDL 2.0 service descriptions) specification. This separate between
        Core/Bindings is common methodology where Core is relevant to
        application developers and Binding (both SOAP and WSDL) is relevant
        for Web service stack implementers. This collective set of
        specifications is referred as "W3C WS-Addressing".</para>

        <para>&jax-ws.product.name.short; supports both versions
        out-of-the-box. Check below on how to enable either of the versions on a service
        endpoint starting from Java or starting from WSDL.</para>
    </section>

    <section xml:id="describing-ws-addressing-in-wsdl">
        <title>Describing WS-Addressing in WSDL</title>

        <para>WS Addressing 1.0- Metadata defines standard ways to describe
        message addressing properties like Action, Destination in wsdl and
        also indicate the use of Addressing in wsdl. WS-Addressing Metadata
        specification replaces the previous <link
        xlink:href="http://www.w3.org/TR/2006/CR-ws-addr-wsdl-20060529/">Web
        Services Addressing 1.0 - WSDL Binding</link> specification in
        candidate recommendation earlier. If you are still using wsdls
        conforming to WS Addressing 1.0 - WSDL Binding specification, skip to
        the next section. Still you may want to update your wsdls to use in
        standard ways defined by the W3C recommended Addressing 1.0 - Metadata
        specification for better interoperability. Also,Â  There is no standard
        mechanism to describe Member Submission version support in the WSDL
        and some implementaions have used WS-Policy to indicate the support of
        member submission version and &jax-ws.product.name.short; understands
        such assertion.</para>

        <section xml:id="ws-addressing-1-0-metadata">
            <title>WS-Addressing 1.0 - Metadata</title>

            <para><link
            xlink:href="http://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/">Addressing
            1.0 - Metadata</link> specification uses Web Services Policy
            Framework (<link
            xlink:href="http://www.w3.org/TR/2007/REC-ws-policy-20070904">WS
            Policy 1.5</link>) and Web Services Policy - Attachment [ <link
            xlink:href="http://www.w3.org/TR/2007/REC-ws-policy-attach-20070904">WS
            Policy 1.5 - Attachment</link>] specifications to express the
            support of Web Services Addressing 1.0. A new policy assertion
            <literal>&lt;wsam:Addressing&gt;</literal> is defined to express
            the support of Addressing. The <literal>wsam:Addressing</literal>
            policy assertion applies to the endpoint policy subject and may be
            attached to <literal>wsdl11:port</literal> or
            <literal>wsdl11:binding</literal>.</para>

            <para>Indicating the requirement of WS-Addressing: When
            <informalexample>
                    <programlisting language="xml"><![CDATA[<wsam:Addressing>]]></programlisting>
                </informalexample>is present in a Policy alternative, one is
            required to use WS-Addressing to communicate with the
            subject.</para>

            <para>Indicating the support of WS-Addressing: <informalexample>
                    <programlisting language="xml"><![CDATA[<wsam:Addressing wsp:Optional="true">]]></programlisting>
                </informalexample>can be used to indicate support for
            WS-Addressing but does not require the use of it. In these cases,
            there are no restrictions about the use of WS-Adressing.</para>

            <para>In certain cases, the endpoint can lay some restrictions to
            indicate the messages it can accept with WS-Addressing. Nested
            asertions can be used to restrict the use of response endpoint
            inside the <literal>&lt;wsam:Addressing&gt;</literal>
            assertion.</para>

            <para>Requiring the use of Non-Anonymous response
            endpoints:</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<wsam:Addressing>
    <wsp:Policy>
        <wsam:NonAnonymousResponses/>
    </wsp:Policy>
</wsam:Addressing>]]></programlisting>
            </informalexample>

            <para>can be used to indicate that the subject requires
            WS-Addressing and requires the use of non-anonymous response EPRs.
            In this case, the response endpoint in the request messages will
            have to use something other than the anonymous URI as the value of
            address. This is typically used when the response needs to be sent
            to a third entity other than the client and service and the
            response is sent to the non-anonyous URI through a new connection
            Requiring the use of Anonymous response endpoints:</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<wsam:Addressing>
    <wsp:Policy>
        <wsam:AnonymousResponses/>
    </wsp:Policy>
</wsam:Addressing>]]></programlisting>
            </informalexample>

            <para>can be used to indicate that the subject requires
            WS-Addressing and requires the use of anonymous responses. In this
            case, the endpoint requires request messages to use response
            endpoint EPRs that contain the anonymous URI
            ("<literal>http://www.w3.org/2005/08/addressing/anonymous</literal>")
            or None URI
            ("<literal>http://www.w3.org/2005/08/addressing/none</literal>")
            as the value of address.</para>
        </section>

        <section xml:id="ws-addressing-wsdl-binding">
            <title>WS-Addressing WSDL Binding</title>

            <para>W3C WS-Addressing WSDL Binding defines an extensibility
            element, <link
            xlink:href="http://www.w3.org/TR/2006/CR-ws-addr-wsdl-20060529/#uaee">wsaw:UsingAddressing</link>,
            that can be used to indicate that an endpoint conforms to the
            WS-Addressing specification. &jax-ws.product.name.short; generates
            this extension element in the WSDL if W3C WS-Addressing is enabled
            on the server-side. On the client side, the RI recognizes this
            extension element and enforce the rules defined by the W3C
            specification. This extensibility element may be augmented with
            <literal>wsdl:required</literal> attribute to indicate whether
            WS-Addressing is required (true) or not (false).</para>

            <para>W3C WS-Addressing WSDL Binding defines
            <literal>wsaw:Anonymous</literal> element which when used in
            conjunction with <literal>wsaw:UsingAddressing</literal> define
            assertions regarding a requirement or a constraint in the use of
            anonymous URI in EPRs sent to the endpoint. The WSDL Binding
            defines three distinct values: <literal>optional</literal>,
            <literal>required</literal> and <literal>prohibited</literal> to
            express the assertion. The default value of
            <literal>wsaw:Anonymous</literal> (equivalent to not present) is
            <literal>optional</literal>. An operation with
            <literal>required</literal> <literal>wsaw:Anonymous</literal>
            value is shown below:</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<wsaw:UsingAddressing wsdl:required="true"/>
<soap:binding transport="http://schemas.xmlsoap.org/soap/http"
        style="document"/>
<operation name="addNumbers">
    <soap:operation soapAction=""/>
    
    ...
    
    <wsaw:Anonymous>required</wsaw:Anonymous>
</operation>
<soap:binding>]]></programlisting>
            </informalexample>

            <para>In this case, a message received at the endpoint, for this
            operation, with a non-anonymous ReplyTo or FaultTo EPR will result
            in a fault message returned back to the client with
            <literal>wsa:OnlyAnonymousAddressSupported</literal> fault code.
            There is no such equivalent feature in Member Submission
            WS-Addressing.</para>
        </section>
    </section>

    <section xml:id="configuring-addressing-on-endpoint">
        <title>Configuring Addressing on Endpoint</title>

        <para>This section describes how W3C and Member Submission
        WS-Addressing can be enabled/disabled on the server-side.</para>

        <section xml:id="starting-from-wsdl">
            <title>Starting from WSDL</title>

            <para>Starting from WSDL, If the wsdl contains the above described
            metadata to indicate use addressing at endpoint scope, Addressing
            is enabled on the server-side.Â  SeeÂ  <xref
            linkend="describing-ws-addressing-in-wsdl"
            xrefstyle="select:title" /> section for more details.</para>
        </section>

        <section xml:id="starting-from-java-1">
            <title>Starting from Java</title>

            <para>This section describes how WS-Addressing can be
            enabled/disabled if you develop an endpoint starting from a Java
            SEI.</para>

            <para>By default, WS-Addressing is disabled on an endpoint
            starting from Java. If that is the expected behavior, then nothing
            else needs to be done. In that case any WS-Addressing headers
            received at the endpoint are treated like SOAP headers targeted
            for the appliaction and are ignored.</para>

            <section xml:id="addressing-annotations">
                <title>Addressing annotations</title>

                <para>If WS-Addressing support needs to be enabled on an
                endpoint, then along with
                <literal>javax.jws.WebService</literal> annotation,
                <literal>javax.xml.ws.soap.Addressing</literal> annotation
                need to be specified for enabling W3C WS-Addressing. If Member
                Submission WS-Addressing needs to be enabled thenÂ 
                <literal>com.sun.xml.ws.developer.MemberSubmissionAddressing</literal>
                annotation needs to be specified on the service endpoint. For
                example, the service endpoint inÂ 
                <literal>fromjava-wsaddressing</literal> sample looks
                like:</para>

                <informalexample>
                    <programlisting language="java"><![CDATA[@javax.xml.ws.soap.Addressing
@javax.jws.WebService
public class AddNumbersImpl {

    // ...

}]]></programlisting>
                </informalexample>

                <para>To enable, Member Submission WS-Addressing, the SEI
                definition needs to be changed to:</para>

                <informalexample>
                    <programlisting language="java"><![CDATA[@com.sun.xml.ws.developer.MemberSubmissionAddressing
@javax.jws.WebService
public class AddNumbersImpl {

    // ...

}]]></programlisting>
                </informalexample>

                <para>Once WS-Addressing support is enabled on a service
                endpoint, then:</para>

                <itemizedlist>
                    <listitem>
                        <para>In the generated WSDL, corresponding metadata as
                        described in section Describing Addressing in WSDL is
                        generated.</para>
                    </listitem>

                    <listitem>
                        <para>All WS-Addressing headers are understood, i.e.
                        if any WS-Addressing header is received with a
                        <literal>mustUnderstand="1"</literal>, then a
                        mustUnderstand fault is not thrown back.</para>
                    </listitem>

                    <listitem>
                        <para>All WS-Addressing headers received at the
                        endpoint are checked for correct syntax, for example
                        an error is returned back if
                        <literal>wsa:ReplyTo</literal> header does not match
                        the infoset defined in the corresponding
                        specification.</para>
                    </listitem>

                    <listitem>
                        <para>If any WS-Addressing header received at the
                        endpoint is not of correct cardinality, then an error
                        is returned back to the client.</para>
                    </listitem>

                    <listitem>
                        <para>If <literal>wsa:Action</literal> header value
                        does not match with that expected for that operation,
                        then an error is returned back to the client.</para>
                    </listitem>

                    <listitem>
                        <para>Any response message sent back to the client
                        contains the required WS-Addressing headers.Â </para>
                    </listitem>
                </itemizedlist>
            </section>

            <section xml:id="is-addressing-optional-or-required">
                <title>Is Addressing Optional or Required ?</title>

                <para>Both <literal>javax.xml.ws.soap.Addressing</literal> and
                <literal>com.sun.xml.ws.developer.MemberSubmissionAddressing</literal>
                annotations take two optional Boolean parameters,
                <literal>enabled</literal> (default true) and
                <literal>required</literal> (default false). If
                <literal>required</literal> is specified true, then
                WS-Addressing rules are enforced. Otherwise the inbound
                message is inspected to find out if WS-A is engaged and then
                the rules are enforced. See <xref
                linkend="when-is-ws-addressing-engaged"
                xrefstyle="select:title" /> section for more details on
                enforcement during runtime.</para>

                <para>For example, to enforce Member Submission WS-Addressing
                rules on the server side, the above code sample will change
                to:</para>

                <informalexample>
                    <programlisting language="java"><![CDATA[@com.sun.xml.ws.developer.MemberSubmissionAddressing(enabled = true,
        required = true)
@javax.jws.WebServicepublic
class AddNumbersImpl {

    // ...

}]]></programlisting>
                </informalexample>
            </section>
        </section>
    </section>

    <section xml:id="on-the-client-side">
        <title>On the client side</title>

        <para>This section describes how WS-Addressing can be enabled/disabled
        on the client-side. &jax-ws.product.name.short; follows the standard
        extensibility elements in WSDL to enable WS-Addressing support on the
        client side. In addition, it also allows the client to instruct
        &jax-ws.product.name.short; to disable WS-Addressing processing. The
        assumption is that in this case the client has it's own WS-Addressing
        processing module. For example, a Dispatch-based client in MESSAGE
        mode may be used to perform non-anonymous ReplyTo/FaultTo
        processing.</para>

        <section xml:id="implicit-behavior">
            <title>Implicit behavior</title>

            <para>As defined in <xref
            linkend="describing-ws-addressing-in-wsdl"
            xrefstyle="select:title" />, If the WSDL contains metadata about
            the support or requirement of WS-Addressing,
            &jax-ws.product.name.short; runtime enables Addressing feature on
            the client-side.</para>

            <itemizedlist>
                <listitem>
                    <para>Generates <literal>Action</literal>,
                    <literal>To</literal>, <literal>MessageID</literal> and
                    anonymous <literal>ReplyTo</literal> headers on the
                    outbound request.</para>
                </listitem>

                <listitem>
                    <para>Any WS-Addressing headers received on the client are
                    processed.</para>
                </listitem>
            </itemizedlist>

            <para>There is no standard extensibility element for Member
            Submission WS-Addressing and so there is no implicit behavior
            defined. It can only be explicitly enabled as described in the
            next section.Â </para>
        </section>

        <section xml:id="explicit-enabling">
            <title>Explicit enabling</title>

            <para>If a WSDL does not contain WS-Addressing standard
            extensibility element, then either W3C WS-Addressing or Member
            Submission WS-Addressing can be explicitly enabled using
            <literal>createDispatch</literal> and <literal>getPort</literal>
            methods on <literal>javax.xml.ws.Service</literal>. The following
            new APIs are added in JAX-WS 2.1:</para>

            <itemizedlist>
                <listitem>
                    <para><informalexample>
                            <programlisting language="java"><![CDATA[<T> Dispatch<T> createDispatch(javax.xml.namespace.QName portName, java.lang.Class<T> type, Service.Mode mode, WebServiceFeature... features)]]></programlisting>
                        </informalexample></para>
                </listitem>

                <listitem>
                    <para><informalexample>
                            <programlisting language="java"><![CDATA[Dispatch<java.lang.Object> createDispatch(javax.xml.namespace.QName portName, javax.xml.bind.JAXBContext context, Service.Mode mode, WebServiceFeature... features)]]></programlisting>
                        </informalexample></para>
                </listitem>

                <listitem>
                    <para><informalexample>
                            <programlisting language="java"><![CDATA[<T> T getPort(java.lang.Class<T> serviceEndpointInterface, WebServiceFeature... features)]]></programlisting>
                        </informalexample></para>
                </listitem>

                <listitem>
                    <para><informalexample>
                            <programlisting language="java"><![CDATA[<T> T getPort(javax.xml.namespace.QName portName, java.lang.Class<T> serviceEndpointInterface, WebServiceFeature... features)]]></programlisting>
                        </informalexample></para>
                </listitem>
            </itemizedlist>

            <para>Each method is a variation of an already existing method in
            JAX-WS 2.0. The only addition is an extra var-arg
            <literal>javax.xml.ws.WebServiceFeature</literal> parameter. A
            <literal>WebServiceFeature</literal> is a new class introduced in
            JAX-WS 2.1 specification used to represent a feature that can be
            enabled or disabled for a Web service.</para>

            <para>The JAX-WS 2.1 specification defines
            <literal>javax.xml.ws.soap.AddressingFeature</literal> to enable
            W3C WS-Addressing on the client side. In addition, the
            &jax-ws.product.name.short; also defines
            <literal>com.sun.xml.ws.developer.MemberSubmissionAddressingFeature</literal>
            to enable Member Submission WS-Addressing on the client
            side.</para>

            <para>For example in <literal>fromjava-wsaddressing</literal>
            example, in order to enable W3C WS-Addressing on a proxy,
            <command>wsimport</command> is used to generate the
            <literal>AddNumbersImplService</literal> class. Then a port can be
            obtained using the <literal>getAddNumbersImplPort</literal> method
            and passing an instance of
            <literal>javax.xml.ws.AddressingFeature</literal>. The code looks
            like:</para>

            <para><informalexample>
                    <programlisting><![CDATA[new AddNumbersImplService().getAddNumbersImplPort(new javax.xml.ws.AddressingFeature());]]></programlisting>
                </informalexample></para>

            <para>Similarly, a <literal>Dispatch</literal> instance with
            Member Submission WS-Addressing can be created as:</para>

            <para><informalexample>
                    <programlisting language="java"><![CDATA[new AddNumbersImplService().createDispatch(
        new QName("http://server.fromjava_wsaddressing/", 
                "AddNumbersImplPort"),
        SOAPMessage.class, 
        Service.Mode.MESSAGE,
        new com.sun.xml.ws.developer.MemberSubmissionAddressingFeature());]]></programlisting>
                </informalexample></para>

            <para><emphasis role="bold">Feature Parameters</emphasis></para>

            <para>Both <literal>javax.xml.ws.soap.AddressingFeature</literal>
            and
            <literal>com.sun.xml.ws.developer.MemberSubmissionAddressingFeature</literal>
            take two optional Boolean parameters, <literal>enabled</literal>
            (default true) and <literal>required</literal> (default false). If
            enabled, all WS-Addressing headers are generated for an outbound
            message. If <literal>required</literal> is specified true, then
            WS-Addressing rules are enforced for inbound message. Otherwise
            the inbound message is inspected to find out if WS-A is engaged
            and then the rules are enforced.</para>

            <para>For example, to enforce Member Submission WS-Addressing
            rules on the client side, the above code sample will change
            to:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[new AddNumbersImplService().getAddNumbersImplPort(new com.sun.xml
        .ws.developer.MemberSubmissionAddressingFeature(true, true));]]></programlisting>
            </informalexample>
        </section>

        <section xml:id="explicit-disabling">
            <title>Explicit disabling</title>

            <para>A client may like to instruct &jax-ws.product.name.short; to
            disable WS-Addressing processing. The assumption is that in this
            case the client has it's own WS-Addressing processing module. For
            example, a Dispatch-based client in MESSAGE mode may be used to
            perform non-anonymous ReplyTo/FaultTo processing.</para>

            <para>WS-Addressing processing can be explicitly disabled using
            one of new methods added to JAX-WS 2.1 specification as defined in
            Section 3.2. For example, W3C WS-Addressing processing can be
            disabled using the following code:</para>

            <para><informalexample>
                    <programlisting language="java"><![CDATA[new AddNumbersImplService().getAddNumbersImplPort(new javax.xml.ws.AddressingFeature(false));]]></programlisting>
                </informalexample></para>
        </section>
    </section>

    <section xml:id="when-is-ws-addressing-engaged">
        <title>When is WS-Addressing engaged?</title>

        <para>W3C WS-Addressing SOAP Binding <link
        xlink:href="http://www.w3.org/TR/2006/REC-ws-addr-soap-20060509/#conformance">defines</link>
        that if a receiver processes a message containing a
        <literal>wsa:Action</literal> header, then SOAP Binding is engaged,
        and the rules of the specification are enforced. In
        &jax-ws.product.name.short;, if WS-Addressing is explicitly disabled
        then the RI does not follow the rules of engagement. However if
        WS-Addressing is either implicitly or explicitly enabled then
        &jax-ws.product.name.short; engages WS-Addressing based upon the
        presence of <literal>wsa:Action</literal> header.
        &jax-ws.product.name.short; follows same rule for Member Submission
        version as well.</para>

        <para>In effect, if an endpoint advertises WS-Addressing is required
        in the WSDL and a client does not send any WS-Addressing header then
        no WS-Addressing fault is returned back to the client. However if the
        client send <literal>wsa:Action</literal> header then the endpoint
        will enforce all the rules of the specification. For example, if the
        <literal>wsa:MessageID</literal> header is missing for a
        request/response MEP then a fault with appropriate code and sub-code
        is thrown back to the client.</para>
    </section>

    <section xml:id="associating-action-with-an-operation">
        <title>Associating Action with an operation</title>

        <section xml:id="implicit-action">
            <title>Implicit Action</title>

            <para>In most common cases, an implicit Action association, as
            defined by <link
            xlink:href="http://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/#actioninwsdl">W3C
            WS-Addressing 1.0 - Metadata</link> and <link
            xlink:href="http://www.w3.org/Submission/ws-addressing/#_Toc77464327">Member
            Submission</link>, will be sufficient. For such cases, only using
            the correct annotation to enable Addressing is required. The
            client looking at such a WSDL will send the implicit
            <literal>wsa:Action</literal> header. If only Addressing is
            enabled by using the appropriate annotation at the SEI,Â </para>
        </section>

        <section xml:id="explicit-action">
            <title>Explicit Action</title>

            <para>This section describes how an explicit Action Message
            Addressing Property can be associated with an operation in the
            SEI.</para>

            <para>W3C WS-Addressing <link
            xlink:href="http://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/#actioninwsdl">W3C
            WS-Addressing 1.0 - Metadata</link> and <link
            xlink:href="http://www.w3.org/Submission/ws-addressing/#_Toc77464325">Member
            Submission WS-Addressing</link> define mechanisms to associate
            Action Message Addressing Property with an operation. JAX-WS 2.1
            defines <literal>javax.xml.ws.Action</literal> and
            <literal>javax.xml.ws.FaultAction</literal> annotations to
            explicitly associate an Action with <literal>input</literal>,
            <literal>output</literal>, and <literal>fault</literal> messages
            of the mapped WSDL operation. For example, one of the methods in
            the <literal>fromjava-wsaddressing</literal> sample looks
            like:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[@Action(input = "http://example.com/input3", output = "http://example.com/output3",
        fault = {@FaultAction(className = AddNumbersException.class,
        value = "http://example.com/fault3")})
public int addNumbers3(int number1, int number2) throws AddNumbersException {

    // ...

}]]></programlisting>
            </informalexample>

            <para>The generated WSDL fragment looks like:</para>

            <informalexample>
                <programlisting language="xml"><![CDATA[<operation name="addNumbers3">
    <input wsam:Action="http://example.com/input3"
            message="tns:addNumbers3"/>
    <output wsam:Action="http://example.com/output3"
            message="tns:addNumbers3Response"/>
    <fault message="tns:AddNumbersException" name="AddNumbersException"
            wsam:Action="http://example.com/fault3"/>
</operation>]]></programlisting>
            </informalexample>

            <para>where <literal>wsam</literal> is bound to W3C WS-Addressing
            1.0 - Metadata namespace or Member Submission namespace depending
            upon the annotation used to enable Addressing.Â </para>
        </section>
    </section>
</section>
