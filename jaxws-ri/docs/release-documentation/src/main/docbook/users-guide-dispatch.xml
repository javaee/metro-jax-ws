<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-dispatch" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Dispatch</title>

    <para>Web service client applications may choose to work at the XML
    message level by using the <literal>Dispatch&lt;T&gt;</literal> APIs. The
    <literal>javax.xml.ws.Dispatch&lt;T&gt;</literal> interface provides
    support for the dynamic invocation of service endpoint operations.</para>

    <para>Four Message Exchange Protocols(MEP) are supported:
    request-response, one way, asynchronous polling, and callback. Each of
    these invocation MEPs are required with JAXB data bound
    <literal>java.lang.Object</literal>,
    <literal>javax.xml.transform.Source</literal>,
    <literal>javax.xml.soap.SOAPMessage</literal> and
    <literal>javax.activation.DataSource</literal> object requests.</para>

    <para>The <literal>javax.xml.ws.Service</literal> acts as a factory for
    the creation of <literal>Dispatch&lt;T&gt;</literal> instances. In
    addition, a <literal>Dispatch&lt;T&gt;</literal> instance is created in
    either <literal>Service.Mode.PAYLOAD</literal> or
    <literal>Service.Mode.MESSAGE</literal> modes. A
    <literal>javax.xml.soap.SOAPMessage</literal> request can only be used
    with a <literal>Dispatch&lt;T&gt;</literal> instance of
    <literal>Service.Mode.MESSAGE</literal> and using the SOAP Binding. A
    <literal>javax.activation.DataSource</literal> request can only be used
    with a <literal>Dispatch&lt;T&gt;</literal> instance of
    <literal>Service.Mode.MESSAGE</literal> and using the XML/HTTP
    Binding.</para>

    <para>Note that the <literal>Dispatch&lt;T&gt;</literal> instance simply
    acts as a conduit for the request. No validation of the message is
    required to be performed by the implementation, though some may catch
    errors during request processing. It is up to the client program to supply
    well-formed XML requests.</para>

    <section xml:id="section-71379735580733">
        <title>Programming Model</title>

        <section xml:id="section-441203977673228">
            <title>Create a dynamic <literal>Service</literal>.</title>

            <para>The <literal>javax.xml.ws.Service</literal> acts as a
            factory for the creation of a dynamic <literal>Service</literal>.
            When created for use with <literal>Dispatch&lt;T&gt;</literal>
            APIs the <literal>Service</literal> created can be either a
            <literal>Service</literal> that has knowledge of the binding
            information of a known <literal>Service</literal> or no knowledge
            of any specific <literal>Service</literal>.</para>

            <para>That is, when the <literal>Service</literal> is created with
            a WSDL file the port(s) binding ID, QName, and endpoint address
            are known to the <literal>Service</literal>.</para>

            <para>The methods to create a dynamic <literal>Service</literal>
            are shown here:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[Service service = Service.create(QName serviceQName);
Service service = Service.create(URL wsdlLocation, QName serviceQName);]]></programlisting>
            </informalexample>

            <para>A <literal>Dispatch&lt;T&gt;</literal> instance must be
            bound to a specific port and endpoint before use. The service has
            an <literal>addPort(QName portName, URI bindingID, String
            endpointAddress)</literal> method that the client program can
            invoke for <literal>Dispatch&lt;T&gt;</literal> objects. Ports
            created using this method can only be used with
            <literal>Dispatch&lt;T&gt;</literal> instances.</para>

            <para>If the <literal>Service</literal> has been created with WSDL
            binding information the the port need not be added as the
            <literal>Dispatch&lt;T&gt;</literal> instance will be created
            specific for the binding information provided in the supplied WSDL
            file.</para>

            <para>Developers who have used web service applications in the
            past are familiar with the port <literal>QName</literal> and
            endpoint address parameters of this method. &jax-ws.product.name;
            supports three <literal>Binding</literal> URI's, that of the SOAP
            1.1, the SOAP 1.2 and XML/HTTP Binding. For more information on
            SOAP 1.2 support please refer to the SOAP 1.2 documents. For the
            XML/HTTP binding please see chapter 11 of the JAX-WS 2.0 PFD
            Specification.</para>

            <para>The addition of the SOAP 1.1 port using the
            <literal>Service</literal> API is shown here:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[service.addPort(QName portName, String SOAPBinding.SOAP11HTTP_BINDING,
        String endpointAddress);]]></programlisting>
            </informalexample>

            <para>SOAP 1.2 support has been implemented for
            <literal>Dispatch</literal>. This requires only one change in the
            programming model. The addition of the SOAP 1.2 port using the
            <literal>Service</literal> API is shown here:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[service.addPort(QName portName, String SOAPBinding.SOAP12HTTP_BINDING,
        String endpointAddress);]]></programlisting>
            </informalexample>

            <para>XML/HTTP binding support has been implemented for
            <literal>Dispatch</literal>. The creation of the XML/HTTP port
            using the <literal>Service</literal> API is shown here:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[service.addPort(QName portName, String HTTPBinding.HTTP_BINDING,
        String endpointAddress);]]></programlisting>
            </informalexample>
        </section>

        <section xml:id="section-7295163740787236">
            <title>Create a <literal>Dispatch&lt;T&gt;</literal>
            instance.</title>

            <para>The <literal>Dispatch&lt;T&gt;</literal> object can be
            created using either of these two <literal>Service</literal>
            methods:</para>

            <informalexample>
                <programlisting language="java"><![CDATA[Dispatch dispatch = service.createDispatch(QName portName, 
        Class clazz, Service.Mode mode);
Dispatch dispatch = service.createDispatch(QName portName, 
        JAXBContext jaxbcontext, Service.Mode mode);]]></programlisting>
            </informalexample>

            <para>For a <literal>javax.xml.transform.Source</literal> and JAXB
            data binding <literal>java.lang.Object</literal>
            <literal>Dispatch&lt;T&gt;</literal> can be created in both
            <literal>Service.Mode.PAYLOAD</literal> and
            <literal>Service.Mode.MESSAGE</literal> modes. A
            <literal>javax.xml.soap.SOAPMessage</literal> can only be created
            in <literal>Service.Mode.MESSAGE</literal> mode. The first form of
            the <literal>createDispatch</literal> method is used to create a
            <literal>javax.xml.transform.Source</literal> or
            <literal>javax.xml.soap.SOAPMessage</literal> specific to the
            <literal>Dispatch&lt;T&gt;</literal> instance.</para>

            <para>A JAXB object-specific instance can only be created using
            the second method listed above.</para>

            <para>It is important to note that once the
            <literal>Dispatch&lt;T&gt;</literal> instance is created it is
            static. That is, its <literal>Service.Mode</literal> or request
            type can not be changed. The instance can be reused given the
            caveat that if it is a JAXB-specific
            <literal>Dispatch&lt;T&gt;</literal> it must be reused with
            objects known to the same <literal>JAXBContext</literal>.</para>
        </section>

        <section xml:id="section-568116144017489">
            <title>Set the context <literal>Map&lt;String,
            Object&gt;</literal> for the request.</title>

            <para>The <literal>Dispatch&lt;T&gt;</literal> interface extends
            the <literal>javax.xml.ws.BindingProvider</literal> interface. The
            <literal>BindingProvider</literal> interface defines accessor
            methods for the request and response context maps. Standard
            <literal>BindingProvider</literal> properties are defined by the
            JAX-WS 2.0 specification and the client program may set and get
            these properties. The application may also define
            application-specific properties, but the specification discourages
            this for portability reasons.</para>
        </section>

        <section xml:id="section-14558813271967286">
            <title>Prepare the message request.</title>

            <para>This is the client developer's responsibility. For examples
            of how to prepare specific request types refer to the
            <literal>Dispatch&lt;T&gt;</literal> sample applications.</para>
        </section>

        <section xml:id="section-628591767064064">
            <title>Invoke the web service request.</title>

            <para>Four types of invocation MEPs are supported using the
            methods below. In methods that produce a response, the type of
            <literal>Object</literal> returned will be of the same type as the
            request. For example, a <literal>SOAPMessage</literal> request
            will return a <literal>SOAPMessage</literal> response.</para>

            <informalexample>
                <programlisting language="java"><![CDATA[Object response = dispatch.invoke(T);
dispatch.invokeOneway(T);
Response<T> response = dispatch.invokeAsync(T);
Future<?> response = dispatch.invokeAsync(T, AsyncHandler);]]></programlisting>
            </informalexample>
        </section>
    </section>

    <section xml:id="section-21282255346754875">
        <title>Dispatch and Asynchronous Invocations</title>

        <para>Asynchronous invocations require special consideration. The
        first form of the <literal>invokeAsync</literal> method is a polling
        method. The response, <literal>Response&lt;T&gt;</literal>,returns to
        the user immediately and may be polled for completion. In the
        meantime, the client program can do other work.</para>

        <para>The <literal>javax.xml.ws.Response&lt;T&gt;</literal> implements
        the <literal>java.util.concurrent.Future&lt;T&gt;</literal> interface
        that is included in J2SE 5.0. The <literal>Response&lt;T&gt;</literal>
        object returns the actual response via its <literal>get</literal>
        method, which blocks if the response is not ready to be
        returned.</para>

        <para>The <literal>Future&lt;T&gt;</literal> interface also has a
        <literal>cancel</literal> method that will attempt to cancel the
        request invocation if the request is being invoked.</para>

        <para>Faults returned from the service or exceptions thrown during the
        invocation are returned when the <literal>Response&lt;T&gt;</literal>
        <literal>get</literal> method is called. Because the execution doesn't
        occur in the main thread, the exception or fault returned is wrapped
        in an <literal>java.util.concurrent.ExecutionException</literal>. To
        obtain the actual cause use the <literal>getCause</literal> method of
        <literal>ExecutionException</literal>.</para>

        <para>For more information on the
        <literal>java.util.concurrent.Future&lt;?&gt;</literal> interface see
        the J2SE 5.0 documentation.</para>

        <informalexample>
            <programlisting language="java"><![CDATA[public interface Response<T> extends java.util.concurrent.Future<T> {

    Map<String, Object> getContext();
    
}]]></programlisting>
        </informalexample>

        <para>The second form of the <literal>invokeAsync</literal> method has
        a second parameter of type
        <literal>javax.xml.ws.AsyncHandler</literal>. The purpose of the
        <literal>AsyncHandler</literal> is to get and handle the the response
        or any fault thrown in an application-specific way. The
        <literal>AsyncHandler</literal> has a method
        <literal>handleResponse(Response&lt;T&gt;)</literal> that takes a
        <literal>javax.xml.ws.Response&lt;T&gt;</literal> parameter. This
        method gets the response or any faults and processes them according to
        behavior defined in the application. Note that it is the
        responsibility of the client program to implement the asynchronous
        handler.</para>

        <informalexample>
            <programlisting language="java"><![CDATA[class ResponseHandler implements javax.xml.ws.AsyncHandler {
    
    public handleResponse(Response<T>);
    
}]]></programlisting>
        </informalexample>

        <para>This form of the asynchronous invocation method returns a
        <literal>Future&lt;?&gt;</literal> object with wildcard type. As in
        the asynchronous poll invocation, the
        <literal>Future&lt;T&gt;</literal> object can be polled to see if the
        response is ready. However, calling the <literal>get</literal> method
        will not return the response of the invocation, but an object of
        indeterminate type.</para>

        <para>Examples of synchronous and asynchronous invocations are shown
        in the <literal>Dispatch&lt;T&gt;</literal> samples. For convenience
        an example of <literal>Response&lt;T&gt;</literal> usage is display
        here:</para>

        <informalexample>
            <programlisting language="java"><![CDATA[Response<Source> response = dispatch.invokeAsync(Source);
while (!response.isDone()) {
    //go off and do some work
}

try {
    //get the actual result
    Source result = (javax.xml.transform.Source) response.get();
    //do something with the result
} catch (ExecutionException ex) {
    //get the actual cause
    Throwable cause = ex.getCause();
} catch (InterupptedException ie) {
    //note interruptions
    System.out.println("Operation invocation interrupted");
}]]></programlisting>
        </informalexample>
    </section>
</section>
