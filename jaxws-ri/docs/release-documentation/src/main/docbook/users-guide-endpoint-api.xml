<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-endpoint-api" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Endpoint API</title>

    <para>Web Service endpoints can be created and published programmatically
    using <literal>javax.xml.ws.Endpoint</literal> API. An endpoint consists
    of a Web Service Implementation object and some configuration information.
    The implementation hosts the web service endpoint using a light weight
    http server and clients can access the web service as if the endpoint is
    deployed in a J2EE container. This means that there is no need to have any
    J2EE servlet or EJB container to host the endpoint. The
    <literal>Endpoint</literal> API provides a way to configure the endpoint
    with the necessary binding, metadata (WSDL and schema documents), handlers
    etc.</para>

    <section xml:id="section-0499646435494807">
        <title><literal>Endpoint</literal></title>

        <para>An endpoint can be created using any of the following
        constructors:</para>

        <informalexample>
            <programlisting language="java"><![CDATA[Endpoint.create(implementor)]]></programlisting>
        </informalexample>

        <informalexample>
            <programlisting language="java"><![CDATA[Endpoint.create(bindingId,implementor)    ]]></programlisting>
        </informalexample>

        <informalexample>
            <programlisting language="java"><![CDATA[Endpoint.publish(address, implementor)    ]]></programlisting>
        </informalexample>

        <para>Once the <literal>Endpoint</literal> object is created using the
        first two constructors, it can be published using
        <literal>Endpoint.publish()</literal>. Any published
        <literal>Endpoint</literal> can be stopped using
        <literal>Endpoint.stop()</literal>. <literal>samples/supplychain/src/supplychain/server/WarehouseLightWeight.java</literal> <application>supplychain</application>
        sample shows creating and publishing an
        <literal>Endpoint</literal>.</para>
    </section>

    <section xml:id="section-2491869058427427">
        <title><literal>Endpoint</literal> and
        <literal>Properties</literal></title>

        <para>An endpoint can be configured to match service name and port
        name of WSDL using properties. This overwrites implementor object's
        serviceName, portName from <literal>@WebService</literal> annotation.
        The port address for an endpoint is patched only if the corresponding
        port's service name, and port name in WSDL are matched.</para>

        <example>
            <title><literal>Endpoint</literal> and
            <literal>Properties</literal> Example</title>

            <programlisting language="java"><![CDATA[Endpoint endpoint = ...

Map<String, Object> map = new HashMap<String, Object>();
map.put(Endpoint.WSDL_SERVICE, new QName(...));
map.put(Endpoint.WSDL_PORT, new QName(...));

endpoint.setProperties(map);]]></programlisting>
        </example>
    </section>

    <section xml:id="section-9038221558727715">
        <title><literal>Endpoint</literal> and
        <literal>Binding</literal></title>

        <para>An endpoint can be configured for different bindings using
        binding ids. These binding ids are defined in JAX-WS API and endpoint
        can be configured by specifying <literal>@BindingType</literal>
        annotation or using binding id in the <literal>Endpoint()</literal>
        constructors. The parameter in constructor overwrites binding defined
        by <literal>@BindingType</literal> annotation. If the binding is not
        specified using <literal>@BindingType</literal> or using a parameter
        in <literal>Endpoint()</literal> constructor, the default binding is
        <literal>SOAP1.1</literal>/<literal>HTTP</literal>. Binding object is
        used to configure MTOM, handler chain etc. SOAP binding object is used
        to configure SOAP binding specifics like roles.</para>

        <para>For example:</para>

        <example>
            <title><literal>Endpoint</literal> and <literal>Binding</literal>
            Example</title>

            <para>The following configures the endpoint for
            <literal>XML/HTTP</literal> binding.</para>

            <programlisting language="java"><![CDATA[Endpoint endpoint = Endpoint.create(HTTPBinding.HTTP_BINDING, 
        implementor);]]></programlisting>

            <para>Working with a <literal>Binding</literal> object:</para>

            <programlisting language="java"><![CDATA[// setting MTOM
SOAPBinding binding = (SOAPBinding) endpoint.getBinding();
binding.setMTOMEnabled(true);

// setting SOAP binding roles
binding.setRoles(...);

// setting handler chain
binding.setHandlerChain(...);]]></programlisting>
        </example>
    </section>

    <section xml:id="section-091994350952741">
        <title><literal>Endpoint</literal> and
        <literal>metadata</literal></title>

        <para>When the service endpoint is created using existing java
        classes, the implementation dynamically generates and publishes WSDL
        and schema documents. But when the service endpoint is created using
        existing WSDL documents, the same WSDL documents can be used for
        publishing using metadata facility. When a <literal>Source</literal>
        object is created, set <literal>systemId</literal> always and make
        sure the imports are resolvable w.r.t
        <literal>systemId</literal>s.</para>

        <example>
            <title><literal>Endpoint</literal> and <literal>metadata</literal>
            Example</title>

            <programlisting language="java"><![CDATA[// metadata processing for WSDL, schema files
List<File> metadataFile =...
List<Source> metadata = new ArrayList<Source>();
for (File file : metadataFile) {
    Source source = new StreamSource(new FileInputStream(file));
    source.setSystemId(file.toURL().toExternalForm());
    metadata.add(source);
}
endpoint.setMetadata(metadata);]]></programlisting>
        </example>
    </section>
</section>
