<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-asyncprovider" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>AsyncProvider</title>

    <para>Web Service endpoints may choose to work at the XML message level by
    implementing the <literal>Provider</literal> interface. The related
    information about <literal>Provider</literal> endpoints is documented in
    <xref linkend="users-guide-provider" xrefstyle="select:title" /> page.
    However <literal>Provider</literal> endpoints are synchronous i.e. they
    receive XML requests and they return XML responses synchronously in
    <literal>invoke()</literal> method. If the endpoint wants to spawn a
    thread to process the request, it would block the jax-ws runtime thread
    and has to manage all the low details synchronizing the threads when the
    response is available. Also blocking a thread doesn't really scale well
    especially when the underlying transport is capable of handling
    asynchronous request and responses. RI provides an implemention specific
    solution to this problem by introducing <literal>AsyncProvider.</literal>
    This is similar to <literal>Provider</literal> endpoints but the
    difference is that the endpoint implementations have to implement
    <literal>AsyncProvider</literal> interface.</para>

    <section xml:id="section-091974998856598">
        <title><literal>AsyncProvider</literal> Example</title>

        <para>The following example shows an <literal>AsyncProvider</literal>
        example that accesses the payload of the request.</para>

        <informalexample>
            <programlisting language="java"><![CDATA[@WebServiceProvider
public class AsyncProviderImpl implements AsyncProvider<Source> {
    
    public void invoke(Source source, AsyncProviderCallback cbak, 
                       WebServiceContext ctxt) {

        // ...
        
    }
    
}]]></programlisting>
        </informalexample>
    </section>

    <section xml:id="section-930633228695613">
        <title><literal>AsyncProvider</literal> sample</title>

        <para>See a <literal>samples/asyncprovider/Readme.txt</literal> that
        illustrates <literal>AsyncProvider</literal> endpoints.</para>
    </section>

    <section xml:id="section-5233554712491355">
        <title><literal>AsyncService</literal> sample</title>

        <para>See another <literal>samples/asyncservice/Readme.txt"</literal> sample that
        illustrates <literal>AsyncProvider</literal> endpoint that uses
        asynchronous servlet as the transport to bring true asynchronity on
        the server-side.</para>
    </section>
</section>
