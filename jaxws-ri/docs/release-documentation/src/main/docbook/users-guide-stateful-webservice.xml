<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="users-guide-stateful-webservice" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Stateful Webservice</title>

    <section xml:id="introduction-1">
        <title>Introduction</title>

        <para>&jax-ws.product.name.short; has a vendor extension that allows
        developers to bring back object state to the web service world.
        Normally, &jax-ws.product.name.short; only creates one instance of a
        service class, and have it serve all incoming requests concurrently.
        This makes it essentially impossible to use instance fields of the
        service class for any meaningful purpose.</para>

        <para>Because of this, people end up coding like C, in anti-OO
        fashion. Either that or you end up with writing boiler-plate code to
        dispatch a request to the right instance of your real domain
        object.</para>

        <para>The stateful web service support in &jax-ws.product.name.short;
        resolves this problem by having &jax-ws.product.name.short; maintain
        multiple instances of a service. By using <xref
        linkend="users-guide-ws-addressing" xrefstyle="select:title" /> behind
        the scene, it provides a standard-based on-the-wire protocol and
        easy-to-use programming model.</para>
    </section>

    <section xml:id="usage">
        <title>Usage</title>

        <para>Application service implementation classes (or providers) who'd
        like to use the stateful web service support must declare
        <code>@Stateful</code> annotation on a class. It should also have a
        <emphasis role="bold">public static</emphasis> method/field that takes
        <code>StatefulWebServiceManager</code>.</para>

        <informalexample>
            <programlisting language="java"><![CDATA[@Stateful
@WebService
@Addressing
class BankAccount {
    
    protected final int id;
    private int balance;

    BankAccount(int id) {
        this.id = id;
    }

    @WebMethod
    public synchronized void deposit(int amount) {
        balance += amount;
    }

    // either via a public static field

    public static StatefulWebServiceManager<BankAccount> manager;

    // ... or  via a public static method (the method name could be 
    // anything)

    public static void setManager(StatefulWebServiceManager<BankAccount> 
                                          manager) {
        // ...
    }

}]]></programlisting>
        </informalexample>

        <para>After your service is deployed but before you receive a first
        request, the resource injection occurs on the field or the
        method.</para>

        <para>A stateful web service class does not need to have a default
        constructor. In fact, most of the time you want to define a
        constructor that takes some arguments, so that each instance carries
        certain state (as illustrated in the above example).</para>

        <para>Each instance of a stateful web service class is identified by
        an unique <literal>EndpointReference</literal>. Your application
        creates an instance of a class, then you'll have
        &jax-ws.product.name.short; assign this unique EPR for the instance as
        follows:</para>

        <informalexample>
            <programlisting language="java"><![CDATA[@WebService
class Bank { // this is ordinary stateless service

    @WebMethod
    public synchronized W3CEndpointReference login(int accountId, 
                                                   int pin) {
        if (!checkPin(pin))
            throw new AuthenticationFailedException("invalid pin");
        BankAccount acc = new BankAccount(accountId);
        return BankAccount.manager.export(acc);
    }
    
}]]></programlisting>
        </informalexample>

        <para>Typically you then pass this EPR to remote systems. When they
        send messages to this EPR, &jax-ws.product.name.short; makes sure that
        the particular exported instance associated with that EPR will receive
        a service invocation.</para>
    </section>

    <section xml:id="things-to-consider">
        <title>Things To Consider</title>

        <para>When you no longer need to tie an instance to the EPR, use
        <literal>unexport(Object)</literal> so that the object can be GC-ed
        (or else you'll leak memory). You may choose to do so explicitly, or
        you can rely on the time out by using <literal>setTimeout(long,
        Callback)</literal>.</para>

        <para><literal>StatefulWebServiceManager</literal> is thread-safe. It
        can be safely invoked from multiple threads concurrently.</para>
    </section>
</section>
